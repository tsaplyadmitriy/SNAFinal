version: '3.3'

services:

  backend:
    container_name: backend-qeep
    build:
      context: .
      dockerfile: 'docker/Dockerfile'
    depends_on:
      - db
    env_file:
      - prod.env
    volumes:
      - ./src:/code
      - type: bind
        source: ./qeep_media
        target: /code/media
    ports:
      - "8000:8000"
    networks:
      backend-qeep:
#    labels:
#      - "traefik.http.services.web.loadbalancer.server.port=8000"
#      - "traefik.enable=true"
#      - "traefik.http.routers.django.rule=Host(`${HOSTNAME}`)"
#      - "traefik.http.routers.django.tls=true"
#      - "traefik.http.routers.django.tls.certresolver=letsencrypt"
    restart: always
    command:  uwsgi --ini "/etc/uwsgi/uwsgi.ini"

  tgbot:
    container_name: tgbot
    build:
      context: .
      dockerfile: 'docker/Dockerfile'
    working_dir: "/code"
    volumes:
      - ./src:/code
      - type: bind
        source: ./qeep_media
        target: /code/media
    ports:
      - "5000-5250:5000-5250"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host(`${HOSTNAME}`)&& Path(`/bot`)"
    depends_on:
      - db
    env_file:
      - prod.env
    environment:
      - SKIP_MIGRATION=True
    networks:
      backend-qeep:
    command: python manage.py bot_webhook
    restart: always

  db:
    image: postgres:13-alpine
    container_name: db
    env_file:
      - prod.env
    volumes:
      - ./qeep_postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      backend-qeep:
    restart: always


  redis:
    container_name: redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      backend-qeep:
    volumes:
      - ./storage/redis/data:/data
    restart: always

  celery_worker:
    command: celery -A main worker -l info
    container_name: celery_worker
    depends_on:
      - db
      - redis
    build:
      context: .
      dockerfile: 'docker/Dockerfile'
    volumes:
      - ./src:/code
      - type: bind
        source: ./qeep_media
        target: /code/media
    env_file:
      - prod.env
    environment:
      - SKIP_MIGRATION=True
    networks:
      backend-qeep:
    restart: always

  celery_beat:
    command: celery -A main beat -l info
    container_name: celery_beat
    depends_on:
      - db
      - redis
    build:
      context: .
      dockerfile: 'docker/Dockerfile'
    volumes:
      - ./src:/code
      - type: bind
        source: ./qeep_media
        target: /code/media
    env_file:
      - prod.env
    environment:
      - SKIP_MIGRATION=True
    networks:
      backend-qeep:
    restart: always

#  traefik:
#      image: traefik:v2.2
#      ports:
#        - "80:80"
#        - "443:443"
#      volumes:
#        - "/var/run/docker.sock:/var/run/docker.sock:ro"
#        - "./traefik.prod.toml:/etc/traefik/traefik.toml"
#      networks:
#        main:
#      restart: always

networks:
  backend-qeep:
