image: tmaier/docker-compose:latest

services:
  - docker:dind

variables:
  DOCKER_COMPOSE_PATH: /opt/docker/${CI_PROJECT_NAME}

stages:
  - build
  - deploy

build_docker_image:
  stage: build
  before_script:
    - echo DEBUG=$DEBUG >> prod.env
    - echo DATABASE=postgres >> prod.env
    - echo SECRET_KEY=$SECRET_KEY >> prod.env
    - echo POSTGRES_DB=$POSTGRES_USER >> prod.env
    - echo POSTGRES_USER=$POSTGRES_DB >> prod.env
    - echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> prod.env
    - echo POSTGRES_HOST=$POSTGRES_HOST >> prod.env
    - echo POSTGRES_PORT=$POSTGRES_PORT >> prod.env
    - echo DJANGO_IMG=$DJANGO_IMG >> prod.env
    - echo BOT_IMG=$BOT_IMG >> prod.env
    - echo MAIN_BOT=$MAIN_BOT >> prod.env
    - echo SUPPORT_BOT=$SUPPORT_BOT >> prod.env
    - echo HOSTNAME=$HOSTNAME >> prod.env
    - echo WEBHOOK_START_PORT=$WEBHOOK_START_PORT >> prod.env
  
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -f docker-compose.yml build
    - docker tag qeep_backend $CI_REGISTRY$CI_PATH$DJANGO_IMG
    - docker tag qeep_tgbot $CI_REGISTRY$CI_PATH$BOT_IMG
    - docker push $CI_REGISTRY$CI_PATH$DJANGO_IMG
    - docker push $CI_REGISTRY$CI_PATH$BOT_IMG
    - docker image prune -a -f
  only:
    - main


deploy_docker_image:
  stage: deploy
  before_script:
    - echo DEBUG=$DEBUG >> prod.env
    - echo DATABASE=postgres >> prod.env
    - echo SECRET_KEY=$SECRET_KEY >> prod.env
    - echo POSTGRES_DB=$POSTGRES_USER >> prod.env
    - echo POSTGRES_USER=$POSTGRES_DB >> prod.env
    - echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> prod.env
    - echo POSTGRES_HOST=$POSTGRES_HOST >> prod.env
    - echo POSTGRES_PORT=$POSTGRES_PORT >> prod.env
    - echo DJANGO_IMG=$DJANGO_IMG >> prod.env
    - echo BOT_IMG=$BOT_IMG >> prod.env
    - echo MAIN_BOT=$MAIN_BOT >> prod.env
    - echo SUPPORT_BOT=$SUPPORT_BOT >> prod.env
    - echo HOSTNAME=$HOSTNAME >> prod.env
    - echo WEBHOOK_START_PORT=$WEBHOOK_START_PORT >> prod.env

    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$DOCKER_SSH_SERVER_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - printf '%s\n' "$DOCKER_SSH_SERVER_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - echo "Add known hossts"
    - ls
    - printf '%s %s\n' "$SERVER_USER@$SERVER_HOST" "$SSH_PUBLIC_KEY" > /etc/ssh/ssh_known_hosts
#    - scp  -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./traefik.prod.toml $SERVER_USER@$SERVER_HOST:/home/$SERVER_USER/app/
    - scp  -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./prod.env ./docker-compose.ci.yml $SERVER_USER@$SERVER_HOST:/home/$SERVER_USER/app/
    - ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << ENDSSH
    - cd /home/$SERVER_USER/app/
    - echo $SERVER_PASS | sudo -S docker login docker.pkg.github.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - sudo docker pull $CI_REGISTRY$CI_PATH$DJANGO_IMG
    - sudo docker pull $CI_REGISTRY$CI_PATH$BOT_IMG
    - sudo docker-compose -f docker-compose.ci.yml up -d
    - sudo docker rmi $(sudo docker images -f dangling=true -q)|| true
    - ENDSSH
  only:
    - main
